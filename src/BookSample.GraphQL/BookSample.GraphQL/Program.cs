using BookSample.Data.Database;
using BookSample.GraphQL.GraphQL;
using BookSample.ReviewApiClient;
using Microsoft.Kiota.Abstractions.Authentication;
using Microsoft.Kiota.Http.HttpClientLibrary;
using BookSample.GraphQL.GraphQL.Queries;

var builder = WebApplication.CreateBuilder(args);

// Aspire (optional, but useful)
builder.AddServiceDefaults();

// Register the EFCore database context with Aspire
builder.AddNpgsqlDbContext<BookDbContext>("books");

// Register the EFCore database context when not using Aspire
//builder.Services.AddDbContext<BookDbContext>(options =>
//{
//    options.UseNpgsql(builder.Configuration.GetRequired("PostgresConnectionString"));
//});

// Register the ReviewClient (generated by Kiota)
builder.Services.AddHttpClient<ReviewClient>().AddTypedClient(httpClient =>
{
    var requestAdapted = new HttpClientRequestAdapter(new AnonymousAuthenticationProvider(), httpClient: httpClient)
    {
        // "review-api" refers to the service name in the Aspire AppHost
        // If you're not using Aspire, you need to specify the URL of the review-service
        BaseUrl = "https://review-api",
    };
    return new ReviewClient(requestAdapted);
});

// Register and configure HotChocolate
builder.Services
    .AddGraphQLServer()
    .InitializeOnStartup()
    .AddQueryType<Query>()
    .AddTypeExtension<BookQueries>()
    .AddMutationType<Mutation>()
    .AddSubscriptionType<Subscription>()
    .AddInMemorySubscriptions()
    //.AddType<AuthorType>()
    //.AddType<BookType>()
    //.AddType<GenreType>()
    //.AddType<PublisherType>();
    .AddGraphQLTypes()   // Replaces the commented AddType calls above. Uses source-generators to create the types (Available in the HotChocolate.Types.Analyzers NuGet package).
    .SetPagingOptions(new()
    {
        IncludeTotalCount = true,
        DefaultPageSize = 100,
        MaxPageSize = 10000
    })
    .AddMutationConventions()
    .RegisterDbContext<BookDbContext>()
    .AddProjections()
    .AddSorting()
    .AddFiltering();

var app = builder.Build();

//app.UseWebSockets();  // With: Subscriptions via WebSockets      Without: Subscriptions via SSE

// Map the GraphQL endpoint
app.MapGraphQL();

// Aspire
app.MapDefaultEndpoints();

app.Run();
